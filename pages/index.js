import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import { useEffect, useState, useRef } from 'react';

import { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';
import { cleanClip } from '../lib/clip-handlers/cleanClip';
import { extractAudioClip } from '../lib/clip-handlers/extractAudioClip';
import { optimiseAudioClip } from '../lib/clip-handlers/optimiseAudioClip';
import { transcribeClip } from '../lib/clip-handlers/transcribeToClip';

import { transcript } from '../lib/videoprocessing/transcript_2_flac_narrowband';

import Loader from '../components/Loader';
// ============FIREBASE=============
import { initializeApp } from 'firebase/app';
import {
  getAuth,
  onAuthStateChanged,
  GoogleAuthProvider,
  signInWithPopup,
  signOut,
} from 'firebase/auth';
import { getStorage, connectStorageEmulator } from 'firebase/storage';
import { getApp } from 'firebase/app';
import { getFunctions, connectFunctionsEmulator } from 'firebase/functions';
import { getFirestore, connectFirestoreEmulator } from 'firebase/firestore';

import { getFirebaseConfig } from '../lib/firebase';
const firebaseAppConfig = getFirebaseConfig();
// TODO 0: Initialize Firebase

// ============FIREBASE=============
const ffmpeg = createFFmpeg({
  corePath: '/ffmpeg-core/ffmpeg-core.js',
});
export default function Home() {
  const [ready, setReady] = useState(false);
  const [video, setVideo] = useState();
  const [clip, setClip] = useState();
  // const [images, setImages] = useState();
  const [cleanedClip, setCleanedClip] = useState();
  const progressRatio = useRef(0);
  // const [progressRatio, setProgressRatio] = useState(0);

  // temporary transcript
  const [transcription, setTranscription] = useState(transcript);

  const [todos, setTodos] = useState([]);
  const [loading, setLoading] = useState(true);

  const IMPORTFILENAME = 'test.mp4';
  const AUDIOFILENAME = 'test.aac';
  const SILENCESFILENAME = 'silence.txt';
  const FINALAUDIO = 'finalAudio.aac';
  const PROCESSEDAUDIOFN = 'finalcut.mp4';
  let CONCATFILENAME = '';

  const load = async () => {
    await ffmpeg.load();
    await ffmpeg.setProgress((p) => {
      console.log('ratio', p);
      // setProgressRatio(p.ratio);
      progressRatio.current = p.ratio;
    });
    setReady(true);
  };

  useEffect(() => {
    load();
  }, []); // only called once

  return (
    <div className={styles.container}>
      <Head>
        <title>SuccinctCut</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Succinct Cut</h1>
        {ready ? (
          <div className="App">
            {video && (
              <video
                controls
                width="250"
                src={URL.createObjectURL(video)}
              ></video>
            )}
            <input
              type="file"
              onChange={(e) => {
                setVideo(e.target.files?.item(0));
                console.log(
                  'e.target.files?.item(0) :>> ',
                  e.target.files?.item(0)
                );
              }}
            />
            <h3>Progress {progressRatio.current} </h3>
            {/* <p>{JSON.stringify(progressRatio)}</p> */}
            <button
              onClick={() => {
                extractAudioClip(
                  ffmpeg,
                  video,
                  IMPORTFILENAME,
                  FINALAUDIO,
                  setClip
                );
              }}
            >
              Extract audio
            </button>
            <button
              onClick={() => {
                optimiseAudioClip(
                  ffmpeg,
                  video,
                  IMPORTFILENAME,
                  AUDIOFILENAME,
                  CONCATFILENAME,
                  FINALAUDIO,
                  setClip
                );
              }}
            >
              Optimise audio
            </button>
            {clip && (
              <button
                onClick={() => {
                  transcribeClip(ffmpeg, FINALAUDIO, setTranscription);
                }}
              >
                Transcribe
              </button>
            )}
            <button
              onClick={() => {
                cleanClip(
                  transcription,
                  ffmpeg,
                  video,
                  IMPORTFILENAME,
                  CONCATFILENAME,
                  PROCESSEDAUDIOFN,
                  setCleanedClip
                );
              }}
            >
              Clean clip
            </button>
            {clip && <video controls width="250" src={clip}></video>}
            {transcription && <p>{JSON.stringify(transcription)}</p>}
            {cleanedClip && (
              <video controls width="250" src={cleanedClip}></video>
            )}
          </div>
        ) : (
          // <Loader show />
          <p>Loading...</p>
        )}
        <div className={styles.grid}></div>
        <div className={styles.grid}>
          {loading ? (
            <div className={styles.card}>
              <h2>Loading</h2>
            </div>
          ) : todos.length === 0 ? (
            <div className={styles.card}>
              <h2>No undone todos</h2>
              <p>
                Consider adding a todo from <a href="/add-todo">here</a>
              </p>
            </div>
          ) : (
            todos.map((todo) => {
              return (
                <div>
                  <h2>{todo.data.arguments['title']}</h2>
                  <p>{todo.data.arguments['description']}</p>
                  <div className={styles.cardActions}>
                    <button type="button">Mark as done</button>
                    <button type="button">Delete</button>
                  </div>
                </div>
              );
            })
          )}
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by En & Sn
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}
initializeApp(firebaseAppConfig);

// EMULATORS
const functions = getFunctions(getApp());
connectFunctionsEmulator(functions, 'localhost', 5001);

const storage = getStorage();
connectStorageEmulator(storage, 'localhost', 9199);

const db = getFirestore();
connectFirestoreEmulator(db, 'localhost', 8080);

// TODO 12: Initialize Firebase Performance Monitoring
// getPerformance();
// initFirebaseAuth();
